apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'java-gradle-plugin'

group = GROUP_ID
version = VERSION_NAME

base {
    archivesName = ARTIFACT_ID
}

repositories {
    mavenCentral()
    google()
}

configurations {
    gradleApi
    compile.extendsFrom gradleApi
    gradleApi.extendsFrom groovy
}

dependencies {
    gradleApi gradleApi()
    groovy localGroovy()

    implementation 'com.android.tools.build:builder-test-api:8.8.1'
    implementation 'com.android.tools:annotations:31.8.1'
    implementation 'com.testdroid:testdroid-api:3.38.0'
    implementation 'com.google.guava:guava:33.4.0-jre'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.11.4'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.11.4'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.11.4'
    testImplementation 'com.android.tools.build:gradle:8.8.1'

    implementation 'com.google.protobuf:protobuf-java:4.29.3'

    testImplementation 'io.netty:netty-codec-http:4.1.118.Final'
    testImplementation 'io.netty:netty-codec-http2:4.1.118.Final'
    testImplementation 'com.google.code.gson:gson:2.12.1'
    testImplementation 'commons-io:commons-io:2.18.0'
    testImplementation 'org.apache.commons:commons-compress:1.27.1'
    testImplementation 'org.jsoup:jsoup:1.18.3'
    testImplementation 'org.jdom:jdom2:2.0.6.1'
    testImplementation 'xerces:xercesImpl:2.12.2'
    testImplementation 'com.google.crypto.tink:tink:1.16.0'
}

gradlePlugin {
    website = 'https://github.com/bitbar/android-gradle-plugin'
    vcsUrl = 'https://github.com/bitbar/android-gradle-plugin.git'
    plugins {
        testdroid {
            displayName = 'Testdroid Gradle Plugin'
            description = 'Gradle plugin to deploys apks to BitBar cloud and launches test run'
            tags.set(['android', 'bitbar', 'testdroid', 'cloud', 'testing'])
            id = 'testdroid'
            implementationClass = 'com.testdroid.TestDroidPlugin'

        }
    }
    automatedPublishing = project.hasProperty("enableAutoPublish")
}

// custom tasks for creating source/javadoc jars
tasks.register('sourcesJar', Jar) {
    dependsOn classes
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

javadoc {
    exclude "**/internal/**"
    options.memberLevel = JavadocMemberLevel.PROTECTED

    title "Testdroid"
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

tasks.register('javadocJar', Jar) {
    dependsOn javadoc
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

// add javadoc/source jar tasks as artifacts
artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

project.ext.sonatypeUsername = hasProperty('sonatypeUsername') ? sonatypeUsername : ""
project.ext.sonatypePassword = hasProperty('sonatypePassword') ? sonatypePassword : ""

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact sourcesJar
            artifact javadocJar
            from components.java

            groupId = GROUP_ID
            artifactId = ARTIFACT_ID
            version = VERSION_NAME

            pom {
                name = POM_NAME
                description = POM_DESCRIPTION
                url = POM_URL

                scm {
                    url = POM_SCM_URL
                    connection = POM_SCM_CONNECTION
                    developerConnection = POM_SCM_DEVELOPER_CONNECTION
                }

                licenses {
                    license {
                        name = POM_LICENSE_NAME
                        url = POM_LICENSE_URL
                        distribution = POM_LICENSE_DISTRIBUTION
                    }
                }

                developers {
                    developer {
                        name = 'Sakari Rautiainen'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials {
                username = project.ext.sonatypeUsername
                password = project.ext.sonatypePassword
            }
        }
    }
}

signing {
    required { gradle.taskGraph.hasTask(":publishMavenJavaPublicationToMavenRepository") }
    sign publishing.publications.mavenJava
}
