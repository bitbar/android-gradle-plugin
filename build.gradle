apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'java-gradle-plugin'

repositories {
    mavenCentral()
}

configurations {
    gradleApi
    compile.extendsFrom gradleApi
    gradleApi.extendsFrom groovy
}

dependencies {
    gradleApi gradleApi()
    groovy localGroovy()

    compile 'com.android.tools.build:builder-test-api:2.3.0'
    compile 'com.android.tools:annotations:25.3.0'
    compile 'com.testdroid:testdroid-api:2.134.1'
    testCompile 'junit:junit:4.13.1'
    testCompile 'com.android.tools.build:gradle:2.3.0'
    testCompile 'com.android.tools.build:gradle-core:2.3.0'
}

group = 'com.testdroid'
archivesBaseName = 'gradle'
version = '2.134.0'

gradlePlugin {
    plugins {
        testdroid {
            id = 'testdroid'
            implementationClass = 'com.testdroid.TestDroidPlugin'
        }
    }
}

// custom tasks for creating source/javadoc jars
task sourcesJar(type: Jar, dependsOn:classes) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

javadoc {
    exclude               "**/internal/**"
    options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED

    title                 "Testdroid"
}

task javadocJar(type: Jar, dependsOn:javadoc) {
    classifier         'javadoc'
    from               javadoc.destinationDir
}
 
// add javadoc/source jar tasks as artifacts
artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

task publishLocal(type: Upload) {
    configuration = configurations.archives
    repositories {
        mavenDeployer {
            repository(url: uri('repo'))
        }
    }
}

project.ext.sonatypeUsername = hasProperty('sonatypeUsername') ? sonatypeUsername : ""
project.ext.sonatypePassword = hasProperty('sonatypePassword') ? sonatypePassword : ""

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment ->
                if (project.ext.sonatypeUsername.length() == 0 || project.ext.sonatypePassword.length() == 0) {
                    throw new StopExecutionException("uploadArchives cannot be called without sonatype username and password")
                }

                signing.signPom(deployment)
            }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: project.ext.sonatypeUsername, password: project.ext.sonatypePassword)
            }

            pom.project {
                name 'Testdroid Plugin for Android'
                description 'Adds support for deploying Android application to testdroid.com from the Android build system.'
                url 'http://www.testdroid.com'
                inceptionYear '2013'

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }

                scm {
                    url "https://github.com/bitbar/android-gradle-plugin.git"
                    connection "git://github.com/bitbar/android-gradle-plugin.git"
                    developerConnection 'scm:git@github.com:bitbar/android-gradle-plugin.git'

                }
                developers {
                    developer {
                        name 'Sakari Rautiainen'
                    }
                }
            }
        }
    }
}

signing {
    required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}
